name: Process New Question Submission

on:
  issues:
    types: [opened, labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: number

jobs:
  process-question:
    if: |
      (github.event_name == 'issues' && (
        contains(github.event.issue.labels.*.name, 'new question') ||
        contains(github.event.issue.body, '### Question') ||
        contains(github.event.issue.title, 'New Question:')
      )) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Parse issue and create question entry
        id: parse-question
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Get issue data - either from event or manual dispatch
            let issue;
            if (context.eventName === 'workflow_dispatch') {
              const issueNumber = context.payload.inputs.issue_number;
              const issueResponse = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              issue = issueResponse.data;
            } else {
              issue = context.payload.issue;
            }
            
            // Parse the issue body to extract form data
            const issueBody = issue.body;
            console.log('Issue body:', issueBody);
            
            // Extract form fields using regex patterns
            const extractField = (fieldName, body) => {
              const regex = new RegExp(`### ${fieldName}\\s*\\n\\s*(.+?)(?=\\n###|\\n\\n|$)`, 'is');
              const match = body.match(regex);
              return match ? match[1].trim() : '';
            };
            
            const question = extractField('Question', issueBody);
            const company = extractField('Company', issueBody);
            const difficulty = extractField('Difficulty Level', issueBody);
            const topic = extractField('Primary Topic', issueBody);
            const solution = extractField('Solution/Answer \\(Optional\\)', issueBody);
            
            // Validate required fields
            if (!question || !company || !difficulty || !topic) {
              core.setFailed('Missing required fields in the issue');
              return;
            }
            
            // Create question object
            const questionEntry = {
              id: Date.now(),
              question: question,
              company: company,
              difficulty: difficulty.toLowerCase(),
              topic: topic,
              solution: solution || null,
              submittedBy: issue.user.login,
              submittedAt: new Date().toISOString(),
              issueNumber: issue.number
            };
            
            console.log('Parsed question:', JSON.stringify(questionEntry, null, 2));
            
            // Read existing questions
            let questions = [];
            try {
              const questionsData = fs.readFileSync('questions.json', 'utf8');
              questions = JSON.parse(questionsData);
            } catch (error) {
              console.log('No existing questions file or empty file, starting with empty array');
              questions = [];
            }
            
            // Add new question
            questions.push(questionEntry);
            
            // Write updated questions back to file
            fs.writeFileSync('questions.json', JSON.stringify(questions, null, 2));
            
            // Set outputs for next steps
            core.setOutput('question-added', 'true');
            core.setOutput('question-id', questionEntry.id);
            core.setOutput('branch-name', `question-${questionEntry.id}`);
            
            return questionEntry;

      - name: Create Pull Request
        if: steps.parse-question.outputs.question-added == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add new question from issue #${{ github.event_name == 'workflow_dispatch' && github.event.inputs.issue_number || github.event.issue.number }}"
          title: "Review: New Question from Issue #${{ github.event_name == 'workflow_dispatch' && github.event.inputs.issue_number || github.event.issue.number }}"
          body: |
            ## New Question Submission Review
            
            **Original Issue:** #${{ github.event_name == 'workflow_dispatch' && github.event.inputs.issue_number || github.event.issue.number }}
            
            ### Question Details:
            - **Company:** ${{ github.event.issue.body }}
            - **Difficulty:** Auto-assigned from submission
            - **Topic:** Auto-assigned from submission
            
            ### Review Checklist:
            - [ ] Question is clear and well-formatted
            - [ ] Difficulty level is appropriate
            - [ ] Topic categorization is correct
            - [ ] Solution (if provided) is accurate
            - [ ] No sensitive or proprietary information
            
            ### Actions:
            - **Approve**: Merge this PR to add the question to the collection
            - **Request Changes**: Comment on specific issues and close this PR
            
            ---
            *This PR was automatically created from issue #${{ github.event_name == 'workflow_dispatch' && github.event.inputs.issue_number || github.event.issue.number }}*
          branch: question-${{ steps.parse-question.outputs.question-id }}
          delete-branch: true
          labels: |
            question-review
            auto-generated

      - name: Add comment to original issue
        if: steps.parse-question.outputs.question-added == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.eventName === 'workflow_dispatch' 
              ? context.payload.inputs.issue_number 
              : context.issue.number;
            github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… Thank you for your submission! 
              
              Your question has been automatically processed and a pull request has been created for review. 
              
              The question will be reviewed by maintainers and added to the collection once approved.
              
              **Next Steps:**
              - Maintainers will review the question for accuracy and appropriateness
              - The difficulty level and categorization may be adjusted if needed
              - You'll be notified when the question is approved and merged
              
              Thanks for contributing to the community! ðŸš€`
            });

      - name: Add review label to issue
        if: steps.parse-question.outputs.question-added == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.eventName === 'workflow_dispatch' 
              ? context.payload.inputs.issue_number 
              : context.issue.number;
            github.rest.issues.addLabels({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['under-review']
            });